" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc

set scrolloff=8
set clipboard=unnamed,unnamedplus
set incsearch
set timeoutlen=10000
set quickscope
set which-key
" Don't use Ex mode, use Q for formatting.
map Q gq

let mapleader=" "

" $ is hard for me to press
map K $
" insert mode navigation
imap <C-j> <Down>
imap <C-k> <Up>
imap <C-h> <Left>
imap <C-l> <Right>
imap <C-i> <CR>

map <leader>w :action IdeaVim.ReloadVimRc.reload<CR>
let g:WhichKeyDesc_which_key_reload = "<leader>w Which-Key Reload"

map ]d <Action>(GotoNextError)
map [d <Action>(GotoPreviousError)

map <leader>sv <Action>(SplitVertically)
map <leader>sh <Action>(SplitHorizontally)
map <leader>su <Action>(UnsplitAll)
let g:WhichKeyDesc_split = "<leader>s Split"
let g:WhichKeyDesc_split_vertical = "<leader>sv Split Vertically"
let g:WhichKeyDesc_split_horizontal = "<leader>shSplit Horizontally"
let g:WhichKeyDesc_split_unsplit = "<leader>su Unsplit All"

map <leader>. <Action>(NextTab)
map <leader>, <Action>(PreviousTab)
let g:WhichKeyDesc_next_tab = "<leader>. Next Tab"
let g:WhichKeyDesc_previous_tab = "<leader>, Previous Tab"

map <leader>xe <Action>(ca.terrylockett.gradleharpoon.popup.EditHotkeyPopup)
map <leader>xr <Action>(ca.terrylockett.gradleharpoon.popup.RunHotkeyPopup)
map <leader>x~ <Action>(ExternalSystem.RefreshAllProjects)
let g:WhichKeyDesc_gradle = "<leader>x Gradle"
let g:WhichKeyDesc_gradle_harpoon_run = "<leader>xr Gradle Harpoon Run"
let g:WhichKeyDesc_gradle_harpoon_edit = "<leader>xe Gradle Harpoon Edit"
let g:WhichKeyDesc_gradle_refresh = "<leader>x~Gradle Refresh"

map <leader>rK <Action>(ShowHoverInfo)
map <leader>rn <Action>(RenameElement)
map <leader>rf <Action>(ReformatCode)
map <leader>ri <Action>(OptimizeImports)
map <leader>rg <Action>(Generate)
map <leader>rem <Action>(ExtractMethod)
map <leader>rec <Action>(IntroduceConstant)
map <leader>rev <Action>(IntroduceVariable)
let g:WhichKeyDesc_code_actions = "<leader>r Code Actions"
let g:WhichKeyDesc_code_actions_rename = "<leader>rn Rename"
let g:WhichKeyDesc_code_actions_hover_text = "<leader>rK Hover Text"
let g:WhichKeyDesc_code_actions_reformat = "<leader>rf Reformat"
let g:WhichKeyDesc_code_actions_imports = "<leader>ri Optimize Imports"
let g:WhichKeyDesc_code_actions_generate = "<leader>rg Generate"
let g:WhichKeyDesc_code_actions_extract = "<leader>re Extract"
let g:WhichKeyDesc_code_actions_extract_method = "<leader>rem Method"
let g:WhichKeyDesc_code_actions_extract_constant = "<leader>rec Constant"
let g:WhichKeyDesc_code_actions_extract_variable = "<leader>rev Variable"

map <leader>gd <Action>(GotoDeclaration)
map <leader>gr <Action>(FindUsages)
map <leader>gi <Action>(GotoImplementation)
map <leader>gb <Action>(Back)
map <leader>gb <Action>(Forward)
let g:WhichKeyDesc_code_go_to = "<leader>g Go To Code"
let g:WhichKeyDesc_code_go_to_declaration = "<leader>gd Declaration"
let g:WhichKeyDesc_code_go_to_usages = "<leader>gr References"
let g:WhichKeyDesc_code_go_to_implementation = "<leader>gi Implementation"
let g:WhichKeyDesc_code_go_to_back = "<leader>gb Back"
let g:WhichKeyDesc_code_go_to_forward = "<leader>gb Forward"

map <leader>ff <Action>(GotoFile)
map <leader>fg <Action>(SearchEverywhere)
map <leader>fc <Action>(GotoClass)
let g:WhichKeyDesc_find = "<leader>f Find"
let g:WhichKeyDesc_find_file = "<leader>ff Find Files"
let g:WhichKeyDesc_find_all = "<leader>fg Find All"
let g:WhichKeyDesc_find_class = "<leader>fc Find Class"


map <leader>nn :NERDTreeToggle<CR>
map <leader>no :NERDTree<CR>
map <leader>nc :NERDTreeClose<CR>
map <leader>nm :NERDTreeFind<CR>
let g:WhichKeyDesc_file_tree = "<leader>n File Tree"
let g:WhichKeyDesc_file_tree_toggle = "<leader>nn Toggle"
let g:WhichKeyDesc_file_tree_open = "<leader>no open"
let g:WhichKeyDesc_file_tree_close = "<leader>nc Close"
let g:WhichKeyDesc_file_tree_current_file = "<leader>nm Current File"

map <leader>tc <Action>(RunClass)
let g:WhichKeyDesc_test = "<leader>t Test"
let g:WhichKeyDesc_test_context = "<leader>tc Context"

map <leader>db <Action>(ToggleLineBreakpoint)
map <leader>dc <Action>(DebugClass)
map <leader>dr <Action>(Resume)
let g:WhichKeyDesc_debug = "<leader>d Debug"
let g:WhichKeyDesc_debug_breakpoint = "<leader>db Toggle Breakpoint"
let g:WhichKeyDesc_debug_context = "<leader>dc Context
let g:WhichKeyDesc_debug_resume = "<leader>dr Resume"
" TODO Debug commands
" Map <leader>d to start debug
"map <leader>d <Action>(Debug)


" --- Enable IdeaVim plugins https://jb.gg/ideavim-plugins
Plug 'machakann/vim-highlightedyank'
Plug 'tpope/vim-commentary'
Plug 'preservim/nerdtree'
Plug 'dbakker/vim-paragraph-motion'
